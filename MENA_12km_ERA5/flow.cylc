#!EmPy
# Cylc Suit for running RegCM5 for MENA region using ERA5 boundary conditions
# Author: Prajeesh
#
# NOTE:
#   Mininum RUNCYCLE should be P1D

@{
RUNCYCLE="P6M"
RegCM5_Nodes=40
RegCM5_Tasks=1280
ACCOUNT="k1325"
PARTITION="workq"
DOMNAME="MENA12km_ERA5"
DOMFILE="/lustre2/project/k1028/pag/RegCM5/Domains/MENA12km/test_mena12_DOMAIN000.nc"
ARCHIVE_PATH="/lustre2/project/k1028/pag/ARCHIVE/RegCM5_Mena_12km"
ENV_FILE="/lustre2/project/k1028/pag/s2s/env.shaheen_intel"
RegCM5_EXE="/project/k1028/saharwm/RegCM5_setup/RegCM-5.0.0/bin/regcmMPIpgiFortran_pgiFortran"
ICBC_EXE="/project/k1028/saharwm/RegCM5_setup/RegCM-5.0.0/bin/icbcpgiFortran_pgiFortran"
SST_EXE="/project/k1028/saharwm/RegCM5_setup/RegCM-5.0.0/bin/sstpgiFortran_pgiFortran"
ISODATETIME="/project/k1028/pag/mambaforge/envs/cylc/bin/isodatetime"
}

[scheduling]
    initial cycle point = 1979-01-01
    final cycle point = 2022-01-01
    [[graph]]
        @RUNCYCLE = """
            regcm[-@RUNCYCLE]:submitted => setup_rundir
            setup_rundir => icbc
            (icbc & archive_restarts[-@RUNCYCLE]) => link_restarts
            link_restarts => regcm => archive_restarts
            regcm => archive_outputs
            (archive_outputs & archive_restarts) => scrap_rundir
        """
[runtime]
    [[root]]
      work sub-directory = $CYLC_TASK_CYCLE_POINT/
      [[[environment]]]
        ARCHIVE_PATH=/lustre2/project/k1028/pag/ARCHIVE/RegCM5_Mena_12km
        ENV_FILE=/lustre2/project/k1028/pag/s2s/env.shaheen_intel
        RegCM5_EXE=@RegCM5_EXE
        ICBC_EXE=@ICBC_EXE
        SST_EXE=@SST_EXE
        ISODATETIME=/project/k1028/pag/mambaforge/envs/cylc/bin/isodatetime
        DOMFILE=@DOMFILE
        DOMNAME=@DOMNAME
        NAMELIST=/lustre2/project/k1028/pag/Regcm_cylc/MENA_12km_ERA5/regcm.input


        # Run 1 hour extra because WRF sometimes fails to write restart files
        OFFSETHOURS=0
        RUNCYCLE=@RUNCYCLE
        time_step=60 # Atm time step

      [[[directives]]]
        --account = @ACCOUNT
        --partition = @PARTITION

    [[icbc]]
        script = """
            source $ENV_FILE
            srun -n 1 $ICBC_EXE regcm.input
            srun -n 1 $SST_EXE regcm.input
            wait
        """
        platform = shaheen
        [[[directives]]]
            --nodes = 1
            --time=24:00:00

    [[archive_icbc]]
        script = """
            set -x
            echo "Archive ICBC"
            INPUT_DIR=$ARCHIVE_PATH/INPUTS/${CYLC_TASK_CYCLE_POINT}
            mkdir -p $INPUT_DIR
            cp -f input-* $INPUT_DIR/
        """
        platform=shaheen_login

    [[link_icbc]]
        script = """
            set -x
            # Link real.exe output files
            INPUT_DIR=$ARCHIVE_PATH/INPUTS/${CYLC_TASK_CYCLE_POINT}
            source_file=$INPUT_DIR/wrfbdy_d01
            [ -e "$source_file" ] && ln -s "$source_file" . || { echo "Error while linking $source_file "; exit 1;}
            source_file=$INPUT_DIR/wrffdda_d01 
            [ -e "$source_file" ] && ln -s "$source_file" . || { echo "Error while linking $source_file "; exit 1;}
            source_file=$INPUT_DIR/wrfinput_d01 
            [ -e "$source_file" ] && ln -s "$source_file" . || { echo "Error while linking $source_file "; exit 1;}
            source_file=$INPUT_DIR/wrflowinp_d01 
            [ -e "$source_file" ] && ln -s "$source_file" . || { echo "Error while linking $source_file "; exit 1;}
        """
        platform=shaheen_login

    [[link_restarts]]
        script = """
            echo "Link restart files"
            # Link restart files
            if [[ "$CYLC_TASK_CYCLE_POINT" == "$CYLC_WORKFLOW_INITIAL_CYCLE_POINT" ]]; then
                echo "Cold start: No restart to link"
                exit 0
            fi

            dateStamp=$($ISODATETIME ${CYLC_TASK_CYCLE_POINT} --format CCYYMMDD)

            source_file=$ARCHIVE_PATH/RESTARTS/${DOMNAME}_SAV.${dateStamp}00.nc
            [ -e "$source_file" ] && ln -sf "$source_file" . || { echo "Error while linking $source_file "; exit 1;}
        """
        platform=shaheen_login

    [[archive_outputs]]
        script = """
          set -x
          echo "Move Outputs"
          mkdir -p $ARCHIVE_PATH/OUTPUTS/
          cd output
          cp *_ATM.*.nc  *_RAD.*.nc  *_SRF.*.nc  *_STS.*.nc $ARCHIVE_PATH/OUTPUTS/
        """
        platform=shaheen_login

    [[archive_restarts]]
        script = """
          set -x
          echo "Move Outputs"
          mkdir -p $ARCHIVE_PATH/RESTARTS/
          cd output
          cp *_SAV.*.nc  $ARCHIVE_PATH/RESTARTS/
        """
        platform=shaheen_login

    [[scrap_rundir]]
        script = """
          set -x
          echo "Scrap run directory"
          rm -rf *
        """
        platform=shaheen_login

    [[setup_rundir]]
        script = """
            set -x

            NEXT_CYCLE_POINT=$($ISODATETIME ${CYLC_TASK_CYCLE_POINT} --offset1=${RUNCYCLE})
            RUN_DURATION_HOURS=$($ISODATETIME ${CYLC_TASK_CYCLE_POINT} ${NEXT_CYCLE_POINT} --as-total H)
            RUN_DURATION_HOURS_FINAL=$($ISODATETIME ${CYLC_TASK_CYCLE_POINT} ${CYLC_WORKFLOW_FINAL_CYCLE_POINT} --as-total H)

            END_DATE=${NEXT_CYCLE_POINT}
            result=$(echo "$RUN_DURATION_HOURS_FINAL < $RUN_DURATION_HOURS" | bc -l)
            if [ "$result" -eq 1 ]; then
              END_DATE=${CYLC_WORKFLOW_FINAL_CYCLE_POINT}
              RUN_DURATION_HOURS=$RUN_DURATION_HOURS_FINAL
            fi

            RUN_HOURS=$( echo "$RUN_DURATION_HOURS + $OFFSETHOURS" | bc )

            result=$(echo "$RUN_DURATION_HOURS == 0" | bc -l)
            if [[ $result -eq 1 ]]; then
              echo "Reached final cycling point nothing to do.."
              exit 1
            fi
            echo $NEXT_CYCLE_POINT $RUN_DURATION_HOURS $NEXT_CYCLE_POINT

            RUN_DURATION_SECONDS=$(echo "$RUN_DURATION_HOURS*3600" | bc)
            RUN_SECONDS=$(echo "$RUN_HOURS*3600" | bc)

            export start_date=$($ISODATETIME ${CYLC_TASK_CYCLE_POINT} -f CCYYMMDD)
            export end_date=$($ISODATETIME ${END_DATE} -f CCYYMMDD)

            export restart=".true."
            if [[ "$CYLC_TASK_CYCLE_POINT" == "$CYLC_WORKFLOW_INITIAL_CYCLE_POINT" ]]; then
              export restart=".false."
            fi

            export restart_interval=$(echo "$RUN_DURATION_HOURS*60" | bc )

            envsubst < $NAMELIST > regcm.input
            mkdir output input

            ln -sf $DOMFILE input/${DOMNAME}_DOMAIN000.nc
        """
        platform = shaheen_login

    [[regcm]]
        script = """
            source $ENV_FILE
            srun $RegCM5_EXE regcm.input
        """
        platform = shaheen
        [[[directives]]]
            --nodes = @RegCM5_Nodes
            --ntasks = @RegCM5_Tasks
            --time=24:00:00

